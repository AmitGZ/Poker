// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Poker.DataModel;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;

/*****
 * TODO
 * remove cards after leaving game
 * create enum for card number
 ****/

namespace PokerClassLibrary
{
    public enum GameStage
    {
        Stopped,
        Preflop,
        Flop,
        Turn,
        River
    }
    public partial class Room
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public virtual List<Card> CardsOnTable { get; set; }
        public virtual List<Pot> Pots { get; set; }
        public virtual List<User> Users { get; set; }
        public short TalkingPosition { get; set; }
        public int DealerPosition { get; set; }
        public int Pot { get; set; }
        public int TurnStake { get; set; }
        public GameStage Stage { get; set; }

        public Room()
        {
            this.Users = new List<User>();
            this.CardsOnTable = new List<Card>();
            this.Pots = new List<Pot>();
            this.Pot = 0;
            this.TurnStake = 0;
            this.Stage = GameStage.Stopped;
            this.DealerPosition = 0;
            this.TalkingPosition = 0;
        }

        public bool AddUser(PokerContext context, User user, int enterMoney)
        {
            if (this.Users.Count == 5)
            {
                return false;
            }

            // Getting available position
            List<short> positions = this.Users.Select(p => p.Position).ToList();
            short pos = 0;
            for (; pos < 5; pos++)
                if (!positions.Contains(pos))
                    break;

            // Adding the player to the room
            user.Money -= enterMoney;
            user.MoneyInTable = enterMoney;
            user.MoneyInTurn = 0;
            user.PlayedThisTurn = false;
            user.Position = pos;
            user.IsActive = false;
            this.Users.Add(user);
            context.SaveChanges();

            // If enough players start game
            if (this.Users.Count() == 2)
                this.StartGame(context);

            return true;
        }

        public bool StartGame(PokerContext context)
        {
            // Updating talking position
            this.TalkingPosition = this.Users.Select(u => u.Position).Min();

            // Getting talking user
            User talklingUser = this.Users.FirstOrDefault(u=>u.Position == this.TalkingPosition);

            // Set everyone active
            this.Users.ForEach(u => u.IsActive = true);

            // Dealing cards 
            List<Card> tmpDeck = GenerateShuffledDeck();

            int cardIdx;
            for (cardIdx = 0; cardIdx < 5; cardIdx++)
            {
                this.CardsOnTable.Add(tmpDeck.ElementAt(cardIdx)); // Adding table cards
            }
            this.Users.ForEach(u => {                      // Adding two cards to each player
                u.Cards.Add(tmpDeck.ElementAt(cardIdx++));
                u.Cards.Add(tmpDeck.ElementAt(cardIdx++));
                }
            );

            // Setting Stage and pot back to 0
            this.Stage = GameStage.Preflop;
            this.Pot = 0;

            // Updating database
            context.SaveChanges();

            return true;
        }

        public bool Fold(User user)
        {
            user.IsActive = false;

            // Getting list of all player positions
            List<short> activePositions = this.Users.Where(u => u.IsActive == true).Select(u => u.Position).ToList();

            if (activePositions.Count() == 2)
            {
                // Set next player the winner
                return false;
            }
            return true;
        }

        public bool ReceiveAction(PokerContext context,string action, int? amount)
        {
            // Pervious talking user
            User talkingUser = this.Users.FirstOrDefault(u => u.Position == this.TalkingPosition);
            
            // Getting list of all player positions
            List<short> activePositions = this.Users.Where(u => u.IsActive == true).Select(u => u.Position).ToList();
            
            if(action == "Fold")
            {
                Fold(talkingUser);
            }
            else if(action == "Call")
            {
                // User has enough money
                if (TurnStake <= talkingUser.MoneyInTable)
                {
                    this.Pot += this.TurnStake - talkingUser.MoneyInTurn;
                    talkingUser.MoneyInTurn -= this.TurnStake - talkingUser.MoneyInTurn;
                }
                else
                {
                    // Open new pot
                }
            }
            else if (action == "Raise" && amount != null)
            {
                // Validating user can raise
                if (talkingUser.MoneyInTable < amount)
                    return false;

                this.TurnStake += (int)amount;
                talkingUser.MoneyInTable -= (int)amount;
                this.Pot += (int)amount;

                //going another Stage
                this.Users.Where(u => u.IsActive == true).ToList().ForEach(u => u.PlayedThisTurn = false);
            }

            // Setting player already played
            talkingUser.PlayedThisTurn = true;

            // Check if everyone played this turn
            if(this.Users.Where(u => u.IsActive == true && u.PlayedThisTurn == false).Count() ==0)
            {
                // Start new Stage
                this.Users.ForEach(u => u.PlayedThisTurn = false);
                this.Stage++;
                if(Stage > GameStage.River)
                {
                    // End game

                    // Start new game 
                    this.StartGame(context);
                }
            }

            // Setting new talking position
            this.TalkingPosition = activePositions.ElementAt((activePositions.IndexOf(TalkingPosition)+1) % activePositions.Count());

            // Updating database
            context.SaveChanges();

            return true;
        }

        private List<Card> GenerateShuffledDeck() // TODO move somewhere else
        {
            List<Card> tmpDeck = new List<Card>();          // Generating deck
            for (var i = 0; i < 4; i++)
            {
                for (var j = 0; j < 13; j++)
                {
                    tmpDeck.Add(new Card() { Suit = (CardSuit)i, Number = j });
                }
            }
            int n = tmpDeck.Count;                          // Shuffling tmpDeck
            Random rng = new Random();
            while (n > 1)
            {
                n--;
                int k = rng.Next(n + 1);
                Card value = tmpDeck[k];
                tmpDeck[k] = tmpDeck[n];
                tmpDeck[n] = value;
            }
            return tmpDeck;
        } 
    }
}