// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Poker.DataModel;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;


namespace PokerClassLibrary
{
    public enum GameStage
    {
        Stopped,
        Preflop,
        Flop,
        Turn,
        River
    }
    public partial class Room
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public virtual List<Card> CardsOnTable { get; set; }
        public virtual List<Pot> Pots { get; set; }
        public virtual List<User> Users { get; set; }
        public short TalkingPosition { get; set; }
        public short DealerPosition { get; set; }
        public int Pot { get; set; }
        public int TurnStake { get; set; }
        public GameStage Stage { get; set; }
        public int BigBlind { get; set; }

        public Room()
        {
            Users = new List<User>();
            CardsOnTable = new List<Card>();
            Pots = new List<Pot>();
            Pot = 0;
            TurnStake = 0;
            Stage = GameStage.Stopped;
            DealerPosition = 0;
            TalkingPosition = 0;
            BigBlind = 10;
        }

        public bool AddUser(PokerContext context, User user, int enterMoney)
        {
            if (Users.Count == 5)
            {
                return false;
            }

            // Getting available position
            List<short> positions = Users.Select(p => p.Position).ToList();
            short pos = 0;
            for (; pos < 5; pos++)
                if (!positions.Contains(pos))
                    break;

            // Adding the player to the room
            user.Money -= enterMoney;
            user.MoneyInTable = enterMoney;
            user.MoneyInTurn = 0;
            user.PlayedThisTurn = false;
            user.Position = pos;
            user.IsActive = false;
            Users.Add(user);
            context.SaveChanges();

            // If enough players start game
            if (Users.Count() == 2 && Stage == GameStage.Stopped)
                StartGame(context);

            return true;
        }

        public bool EndGame(PokerContext context)
        {
            // Resetting table
            Users.ToList().ForEach(u => u.Cards.ToList().ForEach(c => u.Cards.Remove(c)));
            CardsOnTable.ToList().ForEach(c => CardsOnTable.Remove(c));
            Users.ForEach(u => u.IsActive = false);
            Stage = GameStage.Stopped;
            // TODO reset pot

            // Changing the dealer
            DealerPosition += 1;

            if(Users.Count() > 1)
            {
                CheckWinner(context);
            }

            return true;
        }

        public bool StartGame(PokerContext context)
        {
            // Setting initial bet
            TurnStake = BigBlind;

            // Getting list of all player positions
            List<short> positions = Users.Select(u => u.Position).ToList();

            // Setting new talking position
            TalkingPosition = positions.ElementAt(DealerPosition % positions.Count());

            // Getting talking user
            User talklingUser = Users.FirstOrDefault(u=>u.Position == TalkingPosition);

            // Set everyone active
            Users.ForEach(u => u.IsActive = true);

            // Dealing cards 
            List<Card> tmpDeck = GenerateShuffledDeck();

            int cardIdx;
            for (cardIdx = 0; cardIdx < 5; cardIdx++)
            {
                CardsOnTable.Add(tmpDeck.ElementAt(cardIdx)); // Adding table cards
            }
            Users.ForEach(u => {                      // Adding two cards to each player
                u.Cards.Add(tmpDeck.ElementAt(cardIdx++));
                u.Cards.Add(tmpDeck.ElementAt(cardIdx++));
                }
            );

            // Setting Stage and pot back to 0
            Stage = GameStage.Preflop;
            Pot = 0;

            // Updating database
            context.SaveChanges();

            return true;
        }

        public bool Fold(PokerContext context,User user)
        {
            user.IsActive = false;
            user.Cards.ToList().ForEach(c => user.Cards.Remove(c));

            // Getting list of all player positions
            List<short> activePositions = Users.Where(u => u.IsActive == true).Select(u => u.Position).ToList();

            if (activePositions.Count() == 1)
            {
                // Set next player the winner

                // End game
                EndGame(context);

                return false;
            }
            return true;
        }

        public bool ReceiveAction(PokerContext context,string action, int? amount)
        {
            // Pervious talking user
            User talkingUser = Users.FirstOrDefault(u => u.Position == TalkingPosition);
            
            // Getting list of all player positions
            List<short> activePositions = Users.Where(u => u.IsActive == true).Select(u => u.Position).ToList();
            
            if(action == "Fold")
            {
                Fold(context, talkingUser);
            }
            else if(action == "Call")
            {
                // User has enough money
                if (TurnStake <= talkingUser.MoneyInTable)
                {
                    talkingUser.MoneyInTurn += TurnStake;
                    talkingUser.MoneyInTable -= TurnStake;
                }
                else
                {
                    // Open new pot
                }
            }
            else if (action == "Raise" && amount != null)
            {
                // Validating user can raise
                if (talkingUser.MoneyInTable < amount)
                    return false;

                TurnStake += (int)amount;
                talkingUser.MoneyInTable -= (int)amount;
                talkingUser.MoneyInTurn += (int)amount;

                //going another Stage
                Users.Where(u => u.IsActive == true).ToList().ForEach(u => u.PlayedThisTurn = false);
            }
            else if(action == "Check")
            {
                if (TurnStake > 0)
                {
                    return false; // Invalid operation
                }
            }

            // Setting player already played
            talkingUser.PlayedThisTurn = true;

            // Check if everyone played this turn
            if(Users.Where(u => u.IsActive == true && u.PlayedThisTurn == false).Count() ==0)
            {
                // Start new Stage
                Users.ForEach(u => u.PlayedThisTurn = false);
                Stage++;
                TurnStake = 0;
                Users.ForEach(u =>
                {
                    Pot += u.MoneyInTurn;
                    u.MoneyInTurn = 0;
                });

                // Checking if game ended
                if(Stage > GameStage.River)
                {
                    // End game
                    EndGame(context);

                    // Start new game 
                    if (Users.Count() >= 2)
                    {
                        StartGame(context);
                    }
                }
            }

            // Setting new talking position
            TalkingPosition = activePositions.ElementAt((activePositions.IndexOf(TalkingPosition)+1) % activePositions.Count());

            // Updating database
            context.SaveChanges();

            return true;
        }

        public User CheckWinner(PokerContext context)
        {
            // Getting list of all active players
            List<short> activePositions = Users.Where(u => u.IsActive == true).Select(u => u.Position).ToList();

            return null;
        }

        private List<Card> GenerateShuffledDeck() // TODO move somewhere else
        {
            // Generating deck
            List<Card> tmpDeck = new List<Card>(); 
            for (var i = 0; i < 4; i++)
            {
                for (var j = 0; j < 13; j++)
                {
                    tmpDeck.Add(new Card() { Suit = (CardSuit)i, Value = (CardValue)j });
                }
            }

            // Shuffling Deck
            int n = tmpDeck.Count;           
            Random rng = new Random();
            while (n > 1)
            {
                n--;
                int k = rng.Next(n + 1);
                Card value = tmpDeck[k];
                tmpDeck[k] = tmpDeck[n];
                tmpDeck[n] = value;
            }
            return tmpDeck;
        } 
    }
}