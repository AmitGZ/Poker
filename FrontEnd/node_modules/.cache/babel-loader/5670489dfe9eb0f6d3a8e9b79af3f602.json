{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amit Zohar\\\\Desktop\\\\New folder\\\\Poker\\\\mychat.frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport Lobby from './components/Lobby';\nimport Login from './components/Login';\nimport Chat from './components/Chat';\nimport Game from './components/Game';\nimport background from '../res';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [connection, setConnection] = useState();\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [rooms, setRooms] = useState([]);\n  const [page, setPage] = useState('');\n\n  const joinGame = async user => {\n    try {\n      const connection = new HubConnectionBuilder().withUrl(\"https://localhost:44382/poker\").configureLogging(LogLevel.Information).build(); //on update from server\n\n      connection.on(\"UsersInRoom\", users => {\n        setUsers(users);\n      });\n      connection.on(\"ReceivePage\", page => {\n        setPage(page);\n      });\n      connection.on(\"ReceiveRooms\", rooms => {\n        setRooms(rooms);\n      });\n      connection.on(\"ReceiveMessage\", (user, message) => {\n        setMessages(messages => [...messages, {\n          user,\n          message\n        }]);\n      }); //resetting all hooks\n\n      connection.onclose(e => {\n        setConnection();\n        setMessages([]);\n        setUsers([]);\n        setRooms([]);\n        setPage();\n      }); //on initial connect move to Lobby\n\n      let room = \"Lobby\";\n      setPage(room);\n      await connection.start();\n      await connection.invoke(\"JoinGame\", {\n        user,\n        room\n      });\n      setConnection(connection);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const joinRoom = async room => {\n    try {\n      setMessages([]); // clearing all messages on room leave\n\n      await connection.invoke(\"JoinRoom\", room);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const sendMessage = async message => {\n    try {\n      await connection.invoke(\"SendMessage\", message);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const closeConnection = async () => {\n    try {\n      connection.closeConnection();\n      setConnection('');\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Poker Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: \"line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), !connection ? /*#__PURE__*/_jsxDEV(Login, {\n      joinGame: joinGame,\n      setPage: setPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Game, {\n      page: page,\n      joinRoom: joinRoom,\n      rooms: rooms,\n      sendMessage: sendMessage,\n      messages: messages,\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"87yxjH2Vw6SIAZycdpWL9XDkHjM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Amit Zohar/Desktop/New folder/Poker/mychat.frontend/src/App.js"],"names":["useState","HubConnectionBuilder","LogLevel","Lobby","Login","Chat","Game","background","App","connection","setConnection","messages","setMessages","users","setUsers","rooms","setRooms","page","setPage","joinGame","user","withUrl","configureLogging","Information","build","on","message","onclose","e","room","start","invoke","console","log","joinRoom","sendMessage","closeConnection"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\nimport Lobby from './components/Lobby';\r\nimport Login from './components/Login';\r\nimport Chat from './components/Chat';\r\nimport Game from './components/Game';\r\nimport background from '../res'\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst App = () => {\r\n  const [connection, setConnection] = useState();\r\n  const [messages, setMessages] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [rooms,setRooms] = useState([]);\r\n  const [page,setPage] = useState('');\r\n\r\n  const joinGame = async (user) => {\r\n    try {\r\n      const connection = new HubConnectionBuilder()\r\n        .withUrl(\"https://localhost:44382/poker\")\r\n        .configureLogging(LogLevel.Information)\r\n        .build();\r\n  \r\n        //on update from server\r\n        connection.on(\"UsersInRoom\", (users) => {\r\n          setUsers(users);\r\n        });\r\n\r\n        connection.on(\"ReceivePage\", (page) => {\r\n          setPage(page);\r\n        });\r\n\r\n        connection.on(\"ReceiveRooms\", (rooms) => {\r\n          setRooms(rooms);\r\n        });\r\n\r\n        connection.on(\"ReceiveMessage\", (user, message) => {\r\n          setMessages(messages => [...messages, { user, message }]);\r\n        });\r\n        \r\n        //resetting all hooks\r\n        connection.onclose(e => {\r\n          setConnection();\r\n          setMessages([]);\r\n          setUsers([]);\r\n          setRooms([]);\r\n          setPage();\r\n        });\r\n  \r\n        //on initial connect move to Lobby\r\n        let room =\"Lobby\"\r\n        setPage(room)\r\n        await connection.start();\r\n        await connection.invoke(\"JoinGame\", { user, room });\r\n        setConnection(connection);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n  }\r\n  const joinRoom = async (room) => {\r\n    try {\r\n      setMessages([]) // clearing all messages on room leave\r\n      await connection.invoke(\"JoinRoom\", room);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  const sendMessage = async (message) => {\r\n    try {\r\n      await connection.invoke(\"SendMessage\", message);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  const closeConnection = async () => {\r\n    try {\r\n      connection.closeConnection();\r\n      setConnection('');\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='app'>\r\n      <h2>Poker Game</h2>\r\n      <hr className='line' />\r\n        {!connection ?\r\n          <Login joinGame={joinGame} setPage = {setPage} /> : \r\n          <Game page ={page} joinRoom={joinRoom} rooms = {rooms} sendMessage = {sendMessage} messages = {messages} users = {users}/>\r\n        }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}